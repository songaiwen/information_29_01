"""
1.生活中很多事物是有顺序关系的，如班级座位从前到后是按排的顺序，从左到右是按列的顺序，
可以很方便的定位到某一个位置，但如果座位是散乱的，就很难定位。

2.在程序中，经常需要将一组（通常是同为某个类型的）数据元素作为整体管理和使用，
需要创建这种元素组，用变量记录它们，传进传出函数等。
一组数据中包含的元素个数可能发生变化（可以增加或删除元素）。

3.对于这种需求，最简单的解决方案便是将这样一组元素看成一个序列，用元素在序列里的位置和顺序，
表示实际应用中的某种有意义的信息，或者表示数据之间的某种关系。

4.这样的一组序列元素的组织形式，我们可以将其抽象为线性表。一个线性表是某类元素的一个集合，
还记录着元素之间的一种顺序关系。线性表是最基本的数据结构之一，在实际程序中应用非常广泛，
它还经常被用作更复杂的数据结构的实现基础。

5.线性表时机存储方式有两种
    顺序表 ，将元素顺序地存放在一块连续的存储区里，元素间的顺序关系由它们的存储顺序自然表示。
    链表 ，将元素存放在通过链接构造起来的一系列存储块中

6.顺序表的基本形式

7.顺序表的结构:包括两部分,一部分是表头区(包括元素存储区的容量,和当前表中已有的元素个数),一个是存储区

8.顺序表的两种基本实现方式:
    1.一体式结构 :
        储表信息的单元与元素存储区以连续的方式安排在一块存储区里，两部分数据的整体形成一个完整的顺序表对象。
        一体式结构整体性强，易于管理。但是由于数据元素存储区域是表对象的一部分，顺序表创建后，元素存储区就固定了。
    2.分离式结构
        表对象里只保存与整个表有关的信息（即容量和元素个数），实际数据元素存放在另一个独立的元素存储区里，通过链接与基本表对象关联。

9.元素存储区替换:
    一体式结构有序舜玉表信息区与数据区连续存储在一起,所以若想更换数据区,则只能整体搬迁,即整个顺序表对象
    (指存储顺序表的结构信息区域)改变了

    分离式结构若想更换数据区,只需将表信息区中的数据链接地址更新即可,而该顺序表对象不变

"""

"""
10.顺序表的操作:
    1.增加元素:
        a.尾部加入元素,时间复杂度为o(1)

        b.非保序的加入元素(不常见), 时间复杂度为o(1)

        c.保序的元素加入,时间复杂度为o(n)

    2.删除元素:
        a. 删除表尾元素，时间复杂度为O(1)

        b. 非保序的元素删除（不常见），时间复杂度为O(1)

        c. 保序的元素删除，时间复杂度为O(n)
"""

"""
11.python中的顺序表
    Python中的list和tuple两种类型采用了顺序表的实现技术，具有前面讨论的顺序表的所有性质。
    tuple是不可变类型，即不变的顺序表，因此不支持改变其内部状态的任何操作，而其他方面，则与list的性质类似。

list的基本实现技术:
    Python标准类型list就是一种元素个数可变的线性表，可以加入和删除元素，
    并在各种操作中维持已有元素的顺序（即保序），而且还具有以下行为特征：
        a.基于下标(位置)的高效元素访问和更新,时间复杂度应该是o(1);
        为满足该特征，应该采用顺序表技术，表中元素保存在一块连续的存储区中。

        b.允许任意加入元素,而且在不断加入元素的过程中,表对象的标识(函数id得到的值)不变
        为满足该特征，就必须能更换元素存储区，并且为保证更换存储区时list对象的标识id不变，只能采用分离式实现技术。

总结:
在Python的官方实现中，list就是一种采用分离式技术实现的动态顺序表。
这就是为什么用list.append(x) （或 list.insert(len(list), x)，即尾部插入）比在指定位置插入元素效率高的原因。

"""