"""
引言
如果我们想要更新项目代码并且完成部署需要做哪些事情?
    1.更新了个人电脑中views.py, 如果一次性上传的文件比较大,需要先打包
    2.一般公司的代码上传到内网的服务器用gitlab管理,
    gitlab将个人电脑中的更新的资源传输到gitlab服务器
    3.将压缩文件传输到外网的部署服务器
    4.解压缩
    5.一定要将原来的文件做备份
    6.将我们上传的代码生效之前先停止服务
        django
        nginx
    7.更新代码
    8.启动项目
        django
        nginx
    9.测试项目

1.shell的定义:shell就是一个命令的解释器
    shell是位于操作系统和应用程序之间,是他们二者最主要的接口,shell负责把应用程序的输入
    命令信息解释给操作系统,将操作系统指令处理的后的结果解释给应用程序
    shell监本就是shell变成的一种具体实现

2.查看shell信息
    查看当前系统的shell类型   echo表示输出  $表示取出
    echo $SHELL

    查看当前系统环境支持的shell
    cat /etc/shells


3.shell使用方式
    手工方式:手工敲击键盘,在shell的命令行输入命令,按Enter后,执行通过键盘输入的命令,然后shell返回并显示命令执行的结果, 逐行输入命令、逐行进行确认执行
    脚本方式: 就是说我们把手工执行的命令a，写到一个脚本文件b中，然后通过执行脚本b，达到执行命令a的效果.

    shell脚本:当可执行的linux命令或语句不在命令行状态下执行,而是通过一个文件执行时,我们将这个文件成为shell脚本,以.sh结尾

    单行注释:除了首行的#不是注释外，其他所有行内容，只要首个字符是#,那么就表示该行是注释
        #!/bin/bash
        echo "1"
        #echo "2"   #这一行就是注释
        echo "3"
    多行注释:     :<<! ........... !   和    :<<block字符 ............字符 block
    !号也可以换成别的,a,b,c.....但是一定要成对出现

4.脚本执行
    shell执行的方式
    1.bash /path/to/script-name   或   /bin/bash /path/to/script-name  (强烈推荐使用)
    说明:脚本文件本身没有可执行权限或者脚本首行没有命令解释器时使用的方法

    2./path/to/script-name   或 ./script-name  (当前路径下执行脚本)
    说明:脚本文件具有可执行权限时使用

    3.source script-name    或  . script-name  (注意"."点号后面有空格)
    说明:使用source或者"."点号,加载shell脚本文件内容,使shell脚本内容环境和当前用户环境一致


5.脚本开发规范
    1.脚本命名要有意义,文件后缀是.sh
    2.脚本文件首行是而且必须是脚本解释器
        #!/bin/bash
    3.脚本文件解释器后面要有脚本的基本信息等内容
    4.脚本文件中尽量不要用中文注释
        尽量用英文注释，防止本机或切换系统环境后中文乱码的困扰
        常见的注释信息：脚本名称、脚本功能描述、脚本版本、脚本作者、联系方式等
    5.脚本文件常见执行方式:bash脚本名
    6.脚本内容执行:从上到下,一次执行
    7.代码书写优秀习惯
        1. 成对内容的一次性写出来,防止遗漏。
           如：()、{}、[]、''、``、""
        2. []中括号两端要有空格,书写时即可留出空格[    ],然后再退格书写内容
        3. 流程控制语句一次性书写完，再添加内容
    8.通过缩进让代码易读(即该有空格的地方要有空格)

6.变量介绍
    变量名=变量值
    1.shell中的变量分为三大类
    本地变量, 全局变量, shell内置变量

    2.本地变量:在当前系统的某个环境下才能生效的变量，作用范围小。
        普通变量:
            方式一：

            ​ 变量名=变量值

            ​ 重点：

            ​ 变量值必须是一个整体，中间没有特殊字符

            方式二：

            ​ 变量名='变量值'

            ​ 重点：

            ​ 不解析变量值的内容

            方式三：

            ​ 变量名="变量值"

            ​ 重点：

            ​ 如果变量值范围内，有可以解析的变量A，那么首先解析变量A，将A的结果和其他内容组合成一个整体，

            ​ 重新赋值给变量B

            习惯：数字不加引号，其他默认加双引号
        命令变量:
            如果我们直接用set=ls  那么echo $set 取出来的内容就仅仅是ls,不能实现ls命令的功能
            定义方式一:
                变量名=`命令`
            定义方式二:
                变量名=$(命令)
            执行流程:
                执行``或者是$()范围内的命令
                将命令执行后的结果返回,赋值给新的便灵保存

7.全局变量:在当前系统的所有环境下都能生效的变量
环境:每打开一个终端就是一个shell环境,使用非source执行方式时,会开启子进程,也是一个shell环境,称为shell环境
查看全局变量使用:env | grep 变量名

定义全局变量:
    变量名=值
    export 变量名

    export 变量名=值

    demo:
    env | grep user  # 当前全局变量中没有user变量

    export user=python3
    env | grep user  # 当前全局变量中有user变量
    user=python3

    打开新的终端执行env命令：
    python@ubuntu:~/Desktop$ env | grep user  # 当前全局变量中没有user变量

    总结:在终端中定义全局变量时,只对当前shell环境及子shell环境有效,对新开的终端无效,当前终端关闭时,定义的全局变量消失

    如果想要自己定义的全局变量在跟系统的全局变量一样在所有环境都有效，需要在~/.bashrc或/etc/profile文件中定义：
        修改~/.bashrc后，直接打开新的终端，定义的全局变量就生效了，此方式只对当前用户有效
        修改/etc/profile时，需要重启操作系统，定义的全局变量才生效，此方式对所有用户有效
        上面两种方式在修改文件后，如果想让全局变量在当前终端生效，需要执行命令source ~/.bashrc或source /etc/profile


8.变量查看和取消
    查看变量
        $变量名
        "$变量名"
        ${变量名}
        "${变量名}"
    取消变量
        unset 变量名


9.shell内置变量
    1.和脚本文件有关的
        $0  获取当前执行的shell脚本的文件名
        $$  获取执行shell脚本的进程号
        $n  获取当前执行的shll脚本的第n和参数值,n=1....9,当n为0时,表示脚本的文件名,如果n大于9就要用大括号括起来${10}
        $#  获取当前shell命令行中的参数的总个数
        $?  获取执行上一个指令的返回值(0为成功,非0为失败)
        $@  获取当前执行的shell脚本参数的列表

    2.字符串精确截取
        格式: ${变量名:起始位置:截取长度}

        demo
          1 #!/bin/bash
          2 str_data=helloworldpython29
          5 echo "${str_data:0:5}"
          6 echo "${str_data:1:5}"
          7 echo "${str_data:0-6:60}"  #表示从倒数第6个开始截取需要用0-n来表示,如果截取的结束位置大于字符串总长度,也不会报错,有多少取多少,取到结束位置
          8 echo "${str_data:0-6}"
          9 echo "${str_data:0}"  #表示取出全部
    3.默认值相关
        场景一:变量a如果由内容,那么输出a的值;如果a没有内容,输出默认的内容
        格式:  ${变量名:-默认值}
              1 #!/bin/bash
              2
              3 title=$1
              4 echo "你的技术级别定位是:${title:-初级}"

        场景二:无论变量a是否有内容,都输出默认值
        格式:  ${变量名+默认值}
              1 #!/bin/bash
              2
              3 title=$1
              5 echo "{你的技术级别的定位是: ${title+初级}}"

             #!/bin/bash
             # 默认值演示示例二
             a="$1"
             echo "国家法定结婚年龄(男性)是 ${a+22} 岁"


10.测试语句
    test 条件表达式
        test 1 -eq 1
        echo $?    #检验是否成功,当返回值为0表示成功，值为其他时表示失败
    [ 条件表达式 ]
    格式注意:
    以上两种方法的作用完全一样，后者为常用。
    [ ]与内部的条件表达式之间需要有空格。没有空格会报错
    test跟 [ ] 都是用于测试条件表达式是否成立,条件成立，状态返回值是0,条件不成立，状态返回值是1

11.条件表达式
    1.逻辑表达式
        && 符号
        命令1 && 命令2
        如果命令1执行成功，那么执行命令2
        如果命令1执行失败，那么不执行命令2
        ||符号
        命令1 || 命令2
        如果命令1执行成功，那么不执行命令2
        如果命令1执行失败，那么执行命令2
    2.文件表达式
        -f 判断输入内容是否是一个文件
            [ -f weizhi.sh ] && echo "是一个文件"
            [ -f weizhi.sddh ] || echo "不是一个文件"
        -d 判断输入内容是否是一个目录
            [ -d weizhi.sddh ] || echo "不是一个目录"
            mkdir nihao
            [ -d nihao ] && echo "是一个目录"
        -x 判断输入内容是否可执行
            [ -x age.sh ] || echo "文件没有执行权限"
            [ -x test.sh ] && echo "文件有执行权限"

    3.数值操作符 主要根据给定的两个值,判断第一个与第二个数的关系
        n1 -eq n2 相等
        n1 -gt n2 大于
        n1 -gte n2 大于等于
        n1 -lt n2 小于
        n1 -lte n2 小于等于
        n1 -ne n2 不等于 字符串比较
            demo:
            root@ubuntu:~# [ a == a ]
            root@ubuntu:~# echo $?
            0
            root@ubuntu:~# [ a != a ]
            root@ubuntu:~# echo $?
            1

    4.计算表达式
        $(( 计算表达式 ))
        let 计算表达式     $(())中只能用+-*/和()运算符，并且只能做整数运算
            demo:
            root@ubuntu:~# n=100
            root@ubuntu:~# echo $(($n/5))
            20

        表达式必须是一个整体，中间不能出现空格等特殊字符
        root@ubuntu:~# i=1
        root@ubuntu:~# let i=i+7
        root@ubuntu:~# echo $i
        8

"""